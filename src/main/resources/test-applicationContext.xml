<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost/study" />
        <property name="username" value="dragon" />
        <property name="password" value="1234" />
    </bean>

    <bean id="userService" class="springbook.user.service.UserServiceImpl">
        <property name="userDao" ref="userDao"/>
        <property name="mailSender" ref="mailSender"/>
    </bean>

                <!-- 스태틱 멤버 클래스는 $로 지정한다. -->                <!-- 프로퍼티 정의를 포함해서 UserService빈의 설정을 상속받는다 -->
    <bean id="testUserService" class="springbook.user.service.UserServiceTest$TestUserServiceImpl" parent="userService" />

    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="mailSender" class="springbook.user.service.DummyMailSender" />

    <bean id="userDao" class="springbook.user.dao.UserDaoJdbc">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="message" class="springbook.learningtest.spring.factorybean.MessageFactoryBean">
        <property name="text" value="Factory Bean" />
    </bean>

    <bean id="transactionAdvice" class="springbook.user.service.TransactionAdvice">
        <property name="transactionManager" ref="transactionManager" />
    </bean>

<!--    <bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">-->
<!--        <property name="advice" ref="transactionAdvice" />-->
<!--        <property name="pointcut" ref="transactionPointcut" />-->
<!--    </bean>-->

<!--    <bean id="transactionPointcut" class="springbook.learningtest.jdk.proxy.NameMatchClassMethodPointcut">-->
<!--        <property name="mappedClassName" value="*ServiceImpl" />-->
<!--        <property name="mappedName" value="upgrade*" />-->
<!--    </bean>-->
<!--    -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- get으로 시작하는 메소드에 대해서는 읽기전용 속성을 부여
            이 메소드가 트랜잭션의 실제 시작 위치가 아니라면 읽기전용 속성은 무시됭  -->
            <tx:method name="get*" propagation="REQUIRED" read-only="true" timeout="30"/>

            <tx:method name="upgrade*" propagation="REQUIRES_NEW" isolation="SERIALIZABLE" />
            <!-- 모든 타깃 메소드에 기본 트랜잭션 속성 지정 -->
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)" />
    </aop:config>

    <bean id="transactionAdvice" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager" />
        <property name="transactionAttributes">
            <props>
                <prop key="get*">PROPAGATION_REQUIRED, readOnly</prop>
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>

    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* *..*ServiceImpl.upgrade*(..))" />
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut" />
    </aop:config>
</beans>


